This project is inspired & forked from https://github.com/michetti/socket.io-benchmark 

A huge refactoring is applied. Besides, there are several new functions added.

- output log to .csv file (Server Side) 
- way to start by command argv
- a additional watcher to check response time every sec

This project should be used to benchmark socket.io implementation itself, in terms of CPU, Memory and Bandwith utilization, and not projects built using it.

There are two tests you can run:
* echo -> each client sends a message to the server, which sends it back to the same client, which repeats the process forever.

* broadcast -> each client sends a message to the server, which broadcasts it to all other clients. The server notify the client if the broadcast went ok, and then the client repeats the process forever.

Installation:
1) 'git clone git@github.com:michetti/socket.io-benchmark.git'
2) on created dir, 'npm install -d'
3) set ulimit 'ulimit -u <desired ulimit>'

* set ulimit to increase max number of opened sockets.

Run:
1)  Start server: 'node server.js'
		 -w        : write log to .csv

		 -p <port> : use specific port 

	e.g. node server.js -w -p 8000

	* log output in ./output/result_<timestamp>.csv


2)  Start clients: 'node client.js'
		 -u <users>			 : number of users, if not specified, 
		 					   there will be only a watcher working
		 -r <seconds>		 : duration to ramp up all users, default 3 secs
		 -b 				 : do broadcast, if not specified, 
		 					   then echo behaviour will be used
		 -host <host>:<port> : use specific hostUrl, default localhost:3000 

    e.g. node clients.js -u 120 -r 60 -b -host localhost:8080 
     	 -> one new user every 0.5 seconds, until 120 users are connected.

	* The watcher use the echo behaviour. The cicle time is logged in miliseconds.


Output:
server.js will log the following line each second:
U: 100, MR/S: 2500, MS/S: 2500, MR/S/U: 25, MS/S/U: 25, CPU: 56%, Mem: 1.8%

U       -> Number of connected users
MR/S    -> Messages received per second
MS/S    -> Messages sended per second
MR/S/U  -> Messages received per second per user
MS/S/U  -> Messages sended per second per user
CPU     -> CPU usage percentage
Mem     -> Memory usage percentage

* log will be write to ./output/result_<timestamp>.csv, if '-w' is given.

To verify global resources utilization (by server and multiple clients processes), use 'top', 'htop' (recomended) or something like it.



